<pre>
  BIP: ????
  Layer: Applications
  Title: Taproot extensions for PSBT
  Author: Elichai Turkel <elichai@turkel.in>
  Comments-Summary: No comments yet.
  Comments-URI: TBD
  Status: Draft
  Type: Standards Track
  Created: 2019-07-08
  License: BSD-3-Clause
</pre>

== Introduction ==

=== Abstract ===

This document proposes a couple of extensions to BIP 174 Partially Signed Bitcoin Transaction Format(aka PSBT).

The main purpose of these extensions is to add taproot support for PSBT.

=== Copyright ===

This BIP is licensed under the 3-clause BSD license.

=== Motivation ===

PSBT is a great format for wallets and transaction signers. adding support for taproot pushes this one step forward.

== Specification ==

In order to support Taproot we need to add a couple of new key-value pairs:  

Per-input types:
* Type: Pay-to-contract input <code>PSBT_IN_PAY_TO_CONTRACT = 0x0A</code>
** Key: The original public key(before the tweak)
*** <tt>{0x0A}|{public key}</tt>
** Value: The 32 byte tweak for this input if it has one
*** <code>{32 byte tweak}</code> <br />
* Type: A taproot merkle path <code>PSBT_IN_TAPROOT_PATH = 0x0B</code>
** Key: None. The key must only contain the 1 byte type
*** <tt>{0x0B}</tt>
** Value: The length of the script followed by the script followed by a list of 32 bytes hashes of siblings to be able to reproduce the root, for this input. (if it has one)
*** <code>{0x0B}|{script length}{script}{32 byte hash of sibling}|..|{32 byte hash of sibling}</code>
** Note: Hashing the script, Then the hash of the script together with the next 32 byte hash and hashing the result together with the next 32 byte should in the end produce a hash equivalent to the merkle root. Which should also be equivalent to the tweak in <code>PSBT_IN_PAY_TO_CONTRACT</code>. The hashing itself should be done according to bip-taproot. <br />


Per-output types:
* Type: Pay-to-contract input <code>PSBT_OUT_PAY_TO_CONTRACT = 0x03</code>
** Key: The original public key(before the tweak)
*** <tt>{0x03}|{public key}</tt>
** Value: The 32 byte tweak for this input if it has one
** <code>{32 byte tweak}</code> <br />
* Type: A taproot merkle path <code>PSBT_OUT_TAPROOT_PATH = 0x04</code>
** Key: None. The key must only contain the 1 byte type
*** <tt>{0x04}</tt>
** Value: The length of the script followed by the script followed by the length of a 32 bytes hashes list, followed by the list itself (the list contains the require siblings to be able to reproduce the root, for this input. (if it has one))
*** <code>{0x04}|{script length}{script}{32 byte hash of sibling}|..|{32 byte hash of sibling}</code>
** Note: Hashing the script, Then the hash of the script together with the next 32 byte hash and hashing the result together with the next 32 byte should in the end produce a hash equivalent to the merkle root. Which should also be equivalent to the tweak in <code>PSBT_IN_PAY_TO_CONTRACT</code>. The hashing itself should be done according to bip-taproot.


Global types:
* Type:  <code>PSBT_GLOBAL_UNDEFINED = 0xFF</code>
** Key: Undefined
*** <tt>{0x03}|?</tt>
** Value: Undefined
** <code>{?}</code> <br />

The purpose of this type is to be used as metadata or other utils by wallets.

TODO: Add references and usecases for that.

== Examples ==
TBD
== Test Vectors ==
TBD

== Rationale ==

<references />

== Reference implementation ==

TBD

== Acknowledgements ==
TBD
